// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          BigInt     @id @default(autoincrement())
  role_name   String     @db.VarChar(10)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt
  permissions Permission[]
  users       User[]
}

model Permission {
  id          BigInt     @id @default(autoincrement())
  role_id     BigInt
  permission  Json       // Storing as JSON for array-like behavior
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt

  role        Role       @relation(fields: [role_id], references: [id])
}

model User {
  id                BigInt     @id @default(autoincrement())
  username          String     @unique @db.VarChar(50)
  email             String     @unique @db.VarChar(100)
  password_hash     String     @db.VarChar(255)
  role_id           BigInt
  firstname         String     @db.VarChar(50)
  lastname          String     @db.VarChar(50)
  gender            String    @db.VarChar(10) // Nullable if not provided
  dob               DateTime  // Nullable if not provided
  phone             String    @db.VarChar(15) // Nullable if not provided
  address           String    @db.VarChar(255) // Nullable if not provided
  profilePic   String    @db.VarChar(255) // Nullable if not provided
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  verified          Boolean    @default(false)
  resetToken            String?  // Optional field to store reset token
  resetTokenExpires     DateTime? 
  emailVerified         DateTime? 
  verificationToken     String?  // Token for email verification
  verificationTokenExpires DateTime?
  

  role              Role       @relation(fields: [role_id], references: [id])
  theses            Thesis[]   @relation("AuthorThesis")
  reviewerTheses    Thesis[]   @relation("ReviewerThesis")
  peer_messages     PeerMessage[]
  notifications     Notification[]
  guidelines        Guidelines[]
  history           History[]
  comments          ThesisComment[]
  ThesisVote        ThesisVote[]
  
  
}

model Thesis {
  thesis_id       BigInt     @id @default(autoincrement())
  title           String     @db.VarChar(255)
  abstract        String     @db.Text
  keywords        Json       // Storing as JSON for array-like behavior
  document_url    String     @db.VarChar(255)
  status          String     @db.VarChar(10)
  category        String     @db.VarChar(10)@default("Other")
  author_id       BigInt
  reviewer_id     BigInt
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
   // Track number of downvotes

  author          User       @relation("AuthorThesis", fields: [author_id], references: [id])
  reviewer        User       @relation("ReviewerThesis", fields: [reviewer_id], references: [id])
  views           ThesisView[]
  downloads       ThesisDownload[]
  peer_messages   PeerMessage[]
  comments        ThesisComment[]
   ThesisVote    ThesisVote[]
}
model ThesisVote {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  thesis_id BigInt   @db.BigInt
  user_id   BigInt   @db.BigInt
  vote_type VoteType
  created_at DateTime @default(now())

  thesis    Thesis @relation(fields: [thesis_id], references: [thesis_id])
  user      User   @relation(fields: [user_id], references: [id])

  @@unique([thesis_id, user_id])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
model ThesisView {
  id          BigInt     @id @default(autoincrement())
  thesis_id   BigInt
  ip_address  String     @db.VarChar(45)
  viewed_at   DateTime   @default(now())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  thesis      Thesis     @relation(fields: [thesis_id], references: [thesis_id])
}

model ThesisDownload {
  id          BigInt     @id @default(autoincrement())
  thesis_id   BigInt
  ip_address  String     @db.VarChar(100)
  downloaded_at DateTime  @default(now())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  thesis      Thesis     @relation(fields: [thesis_id], references: [thesis_id])
}

model PeerMessage {
  id          BigInt     @id @default(autoincrement())
  title       String     @db.VarChar(255) 
  review      String     @db.Text
  review_date DateTime   @db.Date
  status      String     @db.VarChar(10)@default("pending")
  thesis_id   BigInt    
  reviewer_id BigInt   
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  thesis      Thesis     @relation(fields: [thesis_id], references: [thesis_id])
  reviewer    User       @relation(fields: [reviewer_id], references: [id])
}
model ThesisComment {
  id              BigInt     @id @default(autoincrement())
  thesis_id       BigInt
  user_id         BigInt
  message_content  String     @db.Text
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  thesis          Thesis     @relation(fields: [thesis_id], references: [thesis_id])
  user            User       @relation(fields: [user_id], references: [id])
}

model Notification {
  id          BigInt     @id @default(autoincrement())
  user_id     BigInt
  message      String     @db.VarChar(255)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  user        User       @relation(fields: [user_id], references: [id])
}

model Guidelines {
  id          BigInt     @id @default(autoincrement())
  user_id     BigInt
   title       String     @unique @default("") @db.VarChar(100)
 description String     @db.Text
  file_url    String?     @db.VarChar(250)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  user        User       @relation(fields: [user_id], references: [id])
}

model History {
  id          BigInt     @id @default(autoincrement())
  user_id     BigInt
  action      String     @db.Text
  description String     @db.Text
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  user        User       @relation(fields: [user_id], references: [id])
}

model EnquiryForm {
  id          BigInt     @id @default(autoincrement())
  name        String     @db.VarChar(50)
  email       String     @db.VarChar(50)
  message     String     @db.Text
  subject     String     @db.VarChar(100)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}
